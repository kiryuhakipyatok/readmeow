services:
  readmeow:
    build: ./
  #  image: kiryuhakipyatok/readmeow:latest
    env_file:
      - .env
    volumes:
      - ./logs/:/logs/
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - ${METRIC_SERVER_PORT}:${METRIC_SERVER_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network
    stop_grace_period: 5s

  postgres:
    image: postgres:latest
    volumes:
      - .db/postgres/data:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app-network
    stop_grace_period: 5s

  redis:
    image: redis:latest
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      start_period: 30s
      retries: 5
    networks:
      - app-network
    volumes:
      - .redis-data:/data 
    stop_grace_period: 5s

  elasticsearch:
    image: elasticsearch:9.1.0
    env_file:
      - .env
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=readmeow-cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - number_of_replicas=0
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health?wait_for_status=green&timeout=60s || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    volumes:
      - .elasticsearch-data:/usr/share/elasticsearch/data
    stop_grace_period: 5s
  
  logstash:
    image: logstash:9.1.3
    volumes:
      - ./configs/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  filebeat:
    image: elastic/filebeat:9.1.3
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./configs/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/:/logs/
    command: ["filebeat", "-e", "--strict.perms=false"]
    networks:
      - app-network

  kibana:
    image: kibana:9.1.3
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/api/status"]
      interval: 3s
      timeout: 3s
      retries: 50
    ports:
      - 5601:5601
    volumes:
      - .kibana-data:/usr/share/kibana/data
    networks:
      - app-network

  migrate:
    build: ./
  #  image: kiryuhakipyatok/migrate:latest
    env_file:
      - .env
    volumes:
      - ./internal/migrations:/migrations
    entrypoint: ["goose", "-dir", "/migrations"]
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    env_file:
      - .env
    ports:
      - ${PROMETHEUS_PORT}:9090
    depends_on:
      - readmeow
    volumes:
      - ./pkg/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - .prometheus-data:/prometheus 
    networks:
      - app-network
    stop_grace_period: 5s

  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - ${GRAFANA_PORT}:3000
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - prometheus
    volumes:
      - .grafana-data:/var/lib/grafana

networks:
  app-network:
    driver: bridge
    external: true
